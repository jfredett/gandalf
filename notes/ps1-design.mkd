
PROBLEM:

this only works if the function is loaded into the shell directly, not if it's a
script. Perhaps a `has_ps1?` call? Then how do we know which commands to look
at?

Maybe better is a PROMPT_COMPONENTS variable which is an array of functions to do
the below against. Then it'd be:

    declare -a prompt_arr
    for component in $PROMPT_COMPONENTS ; do
      if [ "${prompt_arr[$component::ps1_position]}" ] ; then
        prefix="${prompt_arr[$component::ps1_position]} "
      else
        prefix=""
      fi

      if $component::ps1_cacheable ; then
        # note double quotes here
        content="($(set_color $(component::ps1_color) $(component::ps1_content)))"
      else
        # note single quotes here
        content='$(set_color $(component::ps1_color) $(component::ps1_content))'
      fi

      prompt_arr[$component::ps1_position]='$prefix$content'

      # this may be superstitious
      unset prefix
      unset content
    done

    first_elt = ${prompt_arr[0]} ; shift $prompt_arr
    prompt_cmd="$first_elt"
    for elt in $prompt_arr ; do
      prompt_cmd="$prompt_cmd $elt"
    done
    prompt_cmd="$prompt_cmd\n\$PROMPT_FOB"

    echo 'export PROMPT_COMMAND=$prompt_cmd' > $SCRIPT_HOME/var/ps1

give or take.

----

idea for ps1 generation.

every function that wants to provide a PS1 component specifies the following
'methods' by defining functions like:

foo::ps1_XXX() {

}

where XXX is one of:

* content - required - the function to call to get the content for this function
* position - optional - a two-digit string of numbers which specifies it's
  desired sort position.
* color - optional - one of the colors as definied in the `set_color` function
* cacheable - optional - default 1 - true / false if this ps1 can be cached
  after firing once. Will not be uncached till a `reload`.

Then the PS1 runs like an installer in install.d, creating a var file with a
single command compiled down to load as the PROMPT_COMMAND

so we'd have something like:

    fob::ps1_content() { echo "--- " ; }
    fob::ps1_position() { echo "00" ; }

    clock::ps1_content() { date +%l:%M ; }
    clock::ps1_position() { echo "01" ; }
    clock::ps1_color() { echo GREEN ; }

    hostname::ps1_content() { hostname ; }
    hostname::ps1_color() { echo WHITE ; }
    hostname::ps1_cacheable() { true ; }
    hostname::ps1_position() { echo 10 ; }


Then the `10-ps1.sh` script would be something like:

    typeset -F | grep "::ps1_" | cut everything but the function name | sort | uniq
    for each above $function, pile into a list of pairs:
      if $function::cacheable ; then
        # note the double quotes on the latter element, meaning this gets
        # interpreted now, not later
        [$function::ps1_position, "($(set_color $function::ps1_color $function::ps1_content))"]
      else
        # note the single quotes, meaning the literal function to run will be
        # copied into the PROMPT_COMMAND
        [$function::ps1_position, '($(set_color $function::ps1_color $function::ps1_content))']
      fi

      sort by first element, strip the fist element,
      write file to export into PROMPT_COMMAND, done.




